apiVersion: v1
kind: Service
metadata:
  labels:
    app: aceitchecripto-adminer-service
  name: aceitchecripto-adminer-service
  namespace: default

spec:
  type: NodePort
  selector:
    app: aceitchecripto-adminer # This references the name of the pod(s) this service will connect to.  If there is more than one replica the service will auto load balance.
  ports:
    - name: http
      protocol: TCP
      port: 80  # Port things will connect to this service on.  This port can be different from the target port.  Think of the service like a NAT proxy.
      targetPort: 8080  # Port the Pod is listening on.

---

apiVersion: apps/v1
kind: Deployment

metadata:
  labels:
    app: aceitchecripto-adminer
  name: aceitchecripto-adminer
  namespace: default

spec:
  replicas: 2  # Number of Pods to run in this deployment.  In this case 2 copies.
  selector:
    matchLabels:
      app: aceitchecripto-adminer # Name of the Pod template below that this deployment is managing.
  template:
    metadata:
      labels:
        app: aceitchecripto-adminer  # Name of the Pod.  This name is important because our service will reference it.
    spec:
      restartPolicy: Always
      containers:
      - name: adminer
        image: adminer:latest  # Use this image to create our pods from.
        imagePullPolicy: IfNotPresent # The image by default will get pulled from Dockerhub if it is not local.